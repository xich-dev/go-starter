// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/cloud/sms/sms.go

// Package sms is a generated GoMock package.
package sms

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSMSManagerInterface is a mock of SMSManagerInterface interface.
type MockSMSManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSMSManagerInterfaceMockRecorder
}

// MockSMSManagerInterfaceMockRecorder is the mock recorder for MockSMSManagerInterface.
type MockSMSManagerInterfaceMockRecorder struct {
	mock *MockSMSManagerInterface
}

// NewMockSMSManagerInterface creates a new mock instance.
func NewMockSMSManagerInterface(ctrl *gomock.Controller) *MockSMSManagerInterface {
	mock := &MockSMSManagerInterface{ctrl: ctrl}
	mock.recorder = &MockSMSManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSMSManagerInterface) EXPECT() *MockSMSManagerInterfaceMockRecorder {
	return m.recorder
}

// GenerateCode mocks base method.
func (m *MockSMSManagerInterface) GenerateCode() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateCode")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateCode indicates an expected call of GenerateCode.
func (mr *MockSMSManagerInterfaceMockRecorder) GenerateCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateCode", reflect.TypeOf((*MockSMSManagerInterface)(nil).GenerateCode))
}

// SendCode mocks base method.
func (m *MockSMSManagerInterface) SendCode(phone, vcode string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCode", phone, vcode)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCode indicates an expected call of SendCode.
func (mr *MockSMSManagerInterfaceMockRecorder) SendCode(phone, vcode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCode", reflect.TypeOf((*MockSMSManagerInterface)(nil).SendCode), phone, vcode)
}
