// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package querier

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    org_id,
    name,
    phone,
    password_hash,
    password_salt
) VALUES ($1, $2, $3, $4, $5) RETURNING id, name, phone, password_hash, password_salt, refresh_token, org_id, deleted_at, created_at, updated_at
`

type CreateUserParams struct {
	OrgID        uuid.UUID
	Name         string
	Phone        string
	PasswordHash string
	PasswordSalt string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.OrgID,
		arg.Name,
		arg.Phone,
		arg.PasswordHash,
		arg.PasswordSalt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.PasswordHash,
		&i.PasswordSalt,
		&i.RefreshToken,
		&i.OrgID,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getOrgInfoByOrgId = `-- name: GetOrgInfoByOrgId :one
SELECT id, name, owner_id, created_at, updated_at, deleted_at FROM orgs WHERE id = $1
`

func (q *Queries) GetOrgInfoByOrgId(ctx context.Context, id uuid.UUID) (*Org, error) {
	row := q.db.QueryRow(ctx, getOrgInfoByOrgId, id)
	var i Org
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const getPhoneCode = `-- name: GetPhoneCode :one
SELECT phone, typ, code, used, updated_at, expired_at FROM phone_code WHERE phone = $1 AND typ = $2
`

type GetPhoneCodeParams struct {
	Phone string
	Typ   string
}

func (q *Queries) GetPhoneCode(ctx context.Context, arg GetPhoneCodeParams) (*PhoneCode, error) {
	row := q.db.QueryRow(ctx, getPhoneCode, arg.Phone, arg.Typ)
	var i PhoneCode
	err := row.Scan(
		&i.Phone,
		&i.Typ,
		&i.Code,
		&i.Used,
		&i.UpdatedAt,
		&i.ExpiredAt,
	)
	return &i, err
}

const getUser = `-- name: GetUser :one
SELECT id, name, phone, password_hash, password_salt, refresh_token, org_id, deleted_at, created_at, updated_at FROM users WHERE phone = $1 OR name = $1
`

func (q *Queries) GetUser(ctx context.Context, phone string) (*User, error) {
	row := q.db.QueryRow(ctx, getUser, phone)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.PasswordHash,
		&i.PasswordSalt,
		&i.RefreshToken,
		&i.OrgID,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getUserAccessRuleNames = `-- name: GetUserAccessRuleNames :many
SELECT
    access_rules.name 
FROM access_rules
JOIN user_access_rules ON user_access_rules.rule_id = access_rules.id
WHERE user_access_rules.user_id = $1
`

func (q *Queries) GetUserAccessRuleNames(ctx context.Context, userID uuid.UUID) ([]string, error) {
	rows, err := q.db.Query(ctx, getUserAccessRuleNames, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isPhoneExist = `-- name: IsPhoneExist :one
SELECT EXISTS (SELECT 1 FROM users WHERE phone = $1) AS exist
`

func (q *Queries) IsPhoneExist(ctx context.Context, phone string) (bool, error) {
	row := q.db.QueryRow(ctx, isPhoneExist, phone)
	var exist bool
	err := row.Scan(&exist)
	return exist, err
}

const isUsernameExist = `-- name: IsUsernameExist :one
SELECT EXISTS (SELECT 1 FROM users WHERE name = $1) AS exist
`

func (q *Queries) IsUsernameExist(ctx context.Context, name string) (bool, error) {
	row := q.db.QueryRow(ctx, isUsernameExist, name)
	var exist bool
	err := row.Scan(&exist)
	return exist, err
}

const markPhoneCodeUsed = `-- name: MarkPhoneCodeUsed :exec
UPDATE phone_code SET used = TRUE WHERE phone = $1 AND typ = $2
`

type MarkPhoneCodeUsedParams struct {
	Phone string
	Typ   string
}

func (q *Queries) MarkPhoneCodeUsed(ctx context.Context, arg MarkPhoneCodeUsedParams) error {
	_, err := q.db.Exec(ctx, markPhoneCodeUsed, arg.Phone, arg.Typ)
	return err
}

const updateUserPasswordByPhone = `-- name: UpdateUserPasswordByPhone :exec
UPDATE users SET password_hash = $2, password_salt = $3 WHERE phone = $1
`

type UpdateUserPasswordByPhoneParams struct {
	Phone        string
	PasswordHash string
	PasswordSalt string
}

func (q *Queries) UpdateUserPasswordByPhone(ctx context.Context, arg UpdateUserPasswordByPhoneParams) error {
	_, err := q.db.Exec(ctx, updateUserPasswordByPhone, arg.Phone, arg.PasswordHash, arg.PasswordSalt)
	return err
}

const upsertPhoneCode = `-- name: UpsertPhoneCode :one
INSERT INTO phone_code (
    phone,
    typ,
    code,
    expired_at,
    updated_at
) VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP) 
ON CONFLICT (phone, typ) DO UPDATE SET code = $3, expired_at = $4, used = FALSE, updated_at = CURRENT_TIMESTAMP
RETURNING phone, typ, code, used, updated_at, expired_at
`

type UpsertPhoneCodeParams struct {
	Phone     string
	Typ       string
	Code      string
	ExpiredAt time.Time
}

func (q *Queries) UpsertPhoneCode(ctx context.Context, arg UpsertPhoneCodeParams) (*PhoneCode, error) {
	row := q.db.QueryRow(ctx, upsertPhoneCode,
		arg.Phone,
		arg.Typ,
		arg.Code,
		arg.ExpiredAt,
	)
	var i PhoneCode
	err := row.Scan(
		&i.Phone,
		&i.Typ,
		&i.Code,
		&i.Used,
		&i.UpdatedAt,
		&i.ExpiredAt,
	)
	return &i, err
}
