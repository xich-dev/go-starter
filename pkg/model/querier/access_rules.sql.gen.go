// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: access_rules.sql

package querier

import (
	"context"

	"github.com/google/uuid"
)

const addUserAccessRule = `-- name: AddUserAccessRule :exec
INSERT INTO user_access_rules (user_id, rule_id) VALUES ((
    SELECT id FROM users WHERE name = $1
), $2) ON CONFLICT DO NOTHING
`

type AddUserAccessRuleParams struct {
	Name   string
	RuleID uuid.UUID
}

func (q *Queries) AddUserAccessRule(ctx context.Context, arg AddUserAccessRuleParams) error {
	_, err := q.db.Exec(ctx, addUserAccessRule, arg.Name, arg.RuleID)
	return err
}

const getAccessRule = `-- name: GetAccessRule :one
SELECT id, name, created_at, updated_at, deleted_at FROM access_rules WHERE name = $1
`

func (q *Queries) GetAccessRule(ctx context.Context, name string) (*AccessRule, error) {
	row := q.db.QueryRow(ctx, getAccessRule, name)
	var i AccessRule
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const getUserAccessRules = `-- name: GetUserAccessRules :many
SELECT
    access_rules.name,
    access_rules.id
FROM access_rules
JOIN user_access_rules ON user_access_rules.rule_id = access_rules.id
WHERE user_access_rules.user_id = $1
`

type GetUserAccessRulesRow struct {
	Name string
	ID   uuid.UUID
}

func (q *Queries) GetUserAccessRules(ctx context.Context, userID uuid.UUID) ([]*GetUserAccessRulesRow, error) {
	rows, err := q.db.Query(ctx, getUserAccessRules, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetUserAccessRulesRow
	for rows.Next() {
		var i GetUserAccessRulesRow
		if err := rows.Scan(&i.Name, &i.ID); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeUserAccessRule = `-- name: RemoveUserAccessRule :exec
DELETE FROM user_access_rules WHERE user_id = $1 AND rule_id = $2
`

type RemoveUserAccessRuleParams struct {
	UserID uuid.UUID
	RuleID uuid.UUID
}

func (q *Queries) RemoveUserAccessRule(ctx context.Context, arg RemoveUserAccessRuleParams) error {
	_, err := q.db.Exec(ctx, removeUserAccessRule, arg.UserID, arg.RuleID)
	return err
}
